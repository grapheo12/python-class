Algorithm:

Binary_search [arr, starting index, last index, element]
Step:1-  mid = (starting index + last index) / 2
Step:2-  If starting index > last index
		Then, Print "Element not found" 
			Exit
 
         Else if element > arr[mid]
		   Then,  starting index = mid + 1
		   Go to Step:1
	
	     Else if element < arr[mid]
		   Then, last index = mid -  1
	     	Go to Step:2
	
	     Else:
		   { means element == arr[mid] }
		   Print "Element Presented at position" + mid
		   Exit

==============================================================
PROGRAM
==============================================================
(01) ....Using Loop
def Binary_search(arr,start_index,last_index,element):
	while (start_index<= last_index):
		mid =(int)(start_index+last_index)/2
		if (element>arr[mid]):
			start_index = mid+1
		elif (element<arr[mid]):
			last_index = mid-1
		elif (element == arr[mid]):
			return mid
	return -1
	
arr = [2,14,19,21,99,210,512,1028,4443,5110]
element = 4443
start_index = 0
last_index = len(arr)-1
found = Binary_search(arr,start_index,last_index,element)
if (found == -1):
	print "element not present in array"
else:
	print "element is present at index " + str(found)



------------------------------------------------------------------------------------
(02)
# Python Program for recursive binary search. 
  
# Returns index of x in arr if present, else -1 
def binarySearch (arr, l, r, x): 
  
    # Check base case 
    if r >= l: 
  
        mid = l + (r - l)/2
  
        # If element is present at the middle itself 
        if arr[mid] == x: 
            return mid 
          
        # If element is smaller than mid, then it  
        # can only be present in left subarray 
        elif arr[mid] > x: 
            return binarySearch(arr, l, mid-1, x) 
  # Else the element can only be present  
        # in right subarray 
        else: 
            return binarySearch(arr, mid + 1, r, x) 
  
    else: 
        # Element is not present in the array 
        return -1
  
# Test array 
arr = [ 2, 3, 4, 10, 40 ] 
x = 10
  
# Function call 
result = binarySearch(arr, 0, len(arr)-1, x) 
  
if result != -1: 
    print "Element is present at index % d" % result 
else: 
    print "Element is not present in array"



Output :

Element is present at index 3

********************************************************************
(2)

  def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found
	
print(binary_search([1,2,3,5,8], 6))
print(binary_search([1,2,3,5,8], 5))

*****************************************************************
(03)
RECURSIVE:

def Binary_search(arr,start_index,last_index,element):
	mid =(int)(start_index+last_index)/2
 
	if(start_index>last_index):
		print "Element not found"
	
	elif (element>arr[mid]):
		start_index = mid+1
		Binary_search(arr,start_index,last_index,element)
 
	elif (element<arr[mid]):
		last_index = mid-1
		Binary_search(arr,start_index,last_index,element)
 
	else:
		print "element is present at index " + str(mid)
	
arr = [2,14,19,21,99,210,512,1028,4443,5110]
element = 99
start_index = 0
last_index = len(arr)-1
Binary_search(arr,start_index,last_index,element)